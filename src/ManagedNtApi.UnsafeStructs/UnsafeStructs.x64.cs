// Generated by StructFlattener v. 0.1.0
// Based on UnsafeStructs.in.cs
// Commandline: "..\..\tools\StructFlattener\bin\Debug\StructFlattener.exe" UnsafeStructs.in.cs -64 -out UnsafeStructs.x64.cs 
// CHANGES TO THIS FILE WILL BE LOST. Modify the input file, or improve StructFlattener if necessary. 
#if X64
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.InteropServices;
namespace ManagedNtApi.Unsafe
{
	[StructLayout ((LayoutKind)2, Pack = 1, Size = 16)]
	public unsafe struct UNICODE_STRING
	{
		[FieldOffset (0)]
		public ushort Length;
		[FieldOffset (2)]
		public ushort MaximumLength;
		[FieldOffset (8)]
		public char* buffer;
		public override string ToString ()
		{
			return Marshal.PtrToStringUni ((IntPtr)buffer);
		}
		unsafe ushort* Test {
			get {
				fixed (UNICODE_STRING* s = &this) {
					return &s->Length;
				}
			}
		}
	}
	// Based on wine's winnt.h, winternl.h definitions
	//struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
	[StructLayout ((LayoutKind)2, Pack = 1, Size = 56)]
	public unsafe struct NT_TIB
	{
		[FieldOffset (0)]
		public IntPtr ExceptionList;
		[FieldOffset (8)]
		public IntPtr StackBase;
		[FieldOffset (16)]
		public IntPtr StackLimit;
		[FieldOffset (24)]
		public IntPtr SubSystemTib;
		[FieldOffset (32)]
		public IntPtr FiberData;
		[FieldOffset (32)]
		public int Version;
		[FieldOffset (40)]
		public IntPtr ArbitraryUserPointer;
		[FieldOffset (48)]
		public NT_TIB* Self;
	}
	[StructLayout (LayoutKind.Sequential)]
	public struct CLIENT_ID
	{
		public IntPtr /*HANDLE*/UniqueProcess;
		public IntPtr /*HANDLE*/UniqueThread;
	}
	[StructLayout (LayoutKind.Sequential)]
	public unsafe struct LIST_ENTRY
	{
		public LIST_ENTRY* Flink;
		public LIST_ENTRY* Blink;
	}
	[StructLayout (LayoutKind.Sequential)]
	public struct ACTIVATION_CONTEXT_STACK
	{
		public IntPtr ActiveFrame;
		/*RTL_ACTIVATION_CONTEXT_STACK_FRAME *ActiveFrame;*/public LIST_ENTRY FrameListCache;
		public uint Flags;
		public uint NextCookieSequenceNumber;
		public uint StackId;
		//this isn't included in the WINE version
	}
	public unsafe struct GDI_TEB_BATCH
	{
		public uint Offset;
		public IntPtr /*HANDLE*/HDC;
		public fixed uint Buffer[0x136];
	};

	// Based on wine's winnt.h, winternl.h definitions
	/***********************************************************************
  * TEB data structure
  *//* win32/win64 *//* 000/0000 *//* 01c/0038 *//* 020/0040 *//* 028/0050 *//* 02c/0058 *//* 030/0060 *//* 034/0068 *//* 038/006c *//* 03c/0070 *//* 040/0078 *//* 044/0080 *//* 0c0/0100 *//* 0c4/0108 *//* 0c8/010c *//* 0cc/0110 *//* 1a4/02c0 *//* 1a8/02c8 *///The addition of StackId to ACTIVATION_CONTEXT_STACK removes 4 of the spare bytes
	/* 1c0/02ec *//* 1d4/0300 *//* 1fc/0350 *//* 6dc/0838 *//* 6e0/0840 *//* 6e4/0848 *//* 6e8/0850 *//* 6f0/0860 *//* 6f4/0868 *//* 6f8/086c *//* 6fc/0870 *//* 700/0878 *//* (wine's winternl.h says "glDispachTable" - most likely a typo...) *//* 714/0890 *//* b74/1150 *//* bdc/1220 *//* be0/1228 *//* be4/1230 *//* be8/1238 *//* bec/1240 *//* bf0/1248 *//* bf4/1250 *//* bf8/1258 used by advapi32 *//* c00/1268 used by advapi32 *//* e0c/1478 *//* e10/1480 *//* f10/1680 *//* f18/1690 *//* f1c/1698 *//* f20/16a0 *//* f28/16b0 *//* f2c/16b8 *//* f6c/1738 *//* f70/1740 *//* f74/1744 *//* f78/1748 *//* f7c/1750 *//* f80/1758 *//* f84/1760 *//* f88/1768 *//* f94/1780 *//* f98/1788 *//* f9c/178c *//* fa0/1790 *//* fa4/1798 *//* fa8/17a0 *//* fac/17a8 *//* fb0/17b0 */
	#if X64
	/*     17b8 */
	#endif
	/* fb4/17c8 */[StructLayout ((LayoutKind)2, Pack = 1, Size = 6096)]
	public unsafe struct TEB
	{
		[FieldOffset (0)]
		public IntPtr Tib_ExceptionList;
		public unsafe NT_TIB* Tib_Ref {
			get {
				fixed (TEB* __s = &this)
					return (NT_TIB*)&__s->Tib_ExceptionList;
			}
		}
		[FieldOffset (8)]
		public IntPtr Tib_StackBase;
		[FieldOffset (16)]
		public IntPtr Tib_StackLimit;
		[FieldOffset (24)]
		public IntPtr Tib_SubSystemTib;
		[FieldOffset (32)]
		public IntPtr Tib_FiberData;
		[FieldOffset (32)]
		public int Tib_Version;
		[FieldOffset (40)]
		public IntPtr Tib_ArbitraryUserPointer;
		[FieldOffset (48)]
		public NT_TIB* Tib_Self;
		[FieldOffset (56)]
		public IntPtr EnvironmentPointer;
		/*HANDLE*/[FieldOffset (64)]
		public IntPtr ClientId_UniqueProcess;
		public unsafe CLIENT_ID* ClientId_Ref {
			get {
				fixed (TEB* __s = &this)
					return (CLIENT_ID*)&__s->ClientId_UniqueProcess;
			}
		}
		/*HANDLE*/[FieldOffset (72)]
		public IntPtr ClientId_UniqueThread;
		[FieldOffset (80)]
		public IntPtr ActiveRpcHandle;
		[FieldOffset (88)]
		public IntPtr ThreadLocalStoragePointer;
		/*PPEB*/[FieldOffset (96)]
		public IntPtr Peb;
		[FieldOffset (104)]
		public uint LastErrorValue;
		[FieldOffset (108)]
		public uint CountOfOwnedCriticalSections;
		[FieldOffset (112)]
		public IntPtr CsrClientThread;
		[FieldOffset (120)]
		public IntPtr Win32ThreadInfo;
		[FieldOffset (128)]
		public fixed uint Win32ClientInfo[31];
		[FieldOffset (256)]
		public IntPtr WOW32Reserved;
		[FieldOffset (264)]
		public uint CurrentLocale;
		[FieldOffset (268)]
		public uint FpSoftwareStatusRegister;
		[FieldOffset (272)]
		public IntPtr SystemReserved1_Start;
		public unsafe IntPtr* SystemReserved1 {
			get {
				fixed (TEB* __s = &this)
					return (IntPtr*)&__s->SystemReserved1_Start;
			}
		}
		[FieldOffset (704)]
		public int ExceptionCode;
		[FieldOffset (712)]
		public IntPtr ActivationContextStack_ActiveFrame;
		public unsafe ACTIVATION_CONTEXT_STACK* ActivationContextStack_Ref {
			get {
				fixed (TEB* __s = &this)
					return (ACTIVATION_CONTEXT_STACK*)&__s->ActivationContextStack_ActiveFrame;
			}
		}
		[FieldOffset (720)]
		public LIST_ENTRY* ActivationContextStack_FrameListCache_Flink;
		[FieldOffset (728)]
		public LIST_ENTRY* ActivationContextStack_FrameListCache_Blink;
		[FieldOffset (736)]
		public uint ActivationContextStack_Flags;
		[FieldOffset (740)]
		public uint ActivationContextStack_NextCookieSequenceNumber;
		[FieldOffset (744)]
		public uint ActivationContextStack_StackId;
		[FieldOffset (748)]
		public fixed byte SpareBytes1[20];
		[FieldOffset (768)]
		public IntPtr SystemReserved2_Start;
		public unsafe IntPtr* SystemReserved2 {
			get {
				fixed (TEB* __s = &this)
					return (IntPtr*)&__s->SystemReserved2_Start;
			}
		}
		[FieldOffset (848)]
		public uint GdiTebBatch_Offset;
		public unsafe GDI_TEB_BATCH* GdiTebBatch_Ref {
			get {
				fixed (TEB* __s = &this)
					return (GDI_TEB_BATCH*)&__s->GdiTebBatch_Offset;
			}
		}
		/*HANDLE*/[FieldOffset (856)]
		public IntPtr GdiTebBatch_HDC;
		[FieldOffset (864)]
		public fixed uint GdiTebBatch_Buffer[0x136];
		/*HANDLE*/[FieldOffset (2104)]
		public IntPtr gdiRgn;
		/*HANDLE*/[FieldOffset (2112)]
		public IntPtr gdiPen;
		/*HANDLE*/[FieldOffset (2120)]
		public IntPtr gdiBrush;
		/*HANDLE*/[FieldOffset (2128)]
		public IntPtr RealClientId_UniqueProcess;
		public unsafe CLIENT_ID* RealClientId_Ref {
			get {
				fixed (TEB* __s = &this)
					return (CLIENT_ID*)&__s->RealClientId_UniqueProcess;
			}
		}
		/*HANDLE*/[FieldOffset (2136)]
		public IntPtr RealClientId_UniqueThread;
		/*HANDLE*/[FieldOffset (2144)]
		public IntPtr GdiCachedProcessHandle;
		[FieldOffset (2152)]
		public uint GdiClientPID;
		[FieldOffset (2156)]
		public uint GdiClientTID;
		[FieldOffset (2160)]
		public IntPtr GdiThreadLocaleInfo;
		[FieldOffset (2168)]
		public fixed uint UserReserved[5];
		[FieldOffset (2192)]
		public IntPtr glDispatchTable_Start;
		public unsafe IntPtr* glDispatchTable {
			get {
				fixed (TEB* __s = &this)
					return (IntPtr*)&__s->glDispatchTable_Start;
			}
		}
		[FieldOffset (4432)]
		public IntPtr glReserved1_Start;
		public unsafe IntPtr* glReserved1 {
			get {
				fixed (TEB* __s = &this)
					return (IntPtr*)&__s->glReserved1_Start;
			}
		}
		[FieldOffset (4640)]
		public IntPtr glReserved2;
		[FieldOffset (4648)]
		public IntPtr glSectionInfo;
		[FieldOffset (4656)]
		public IntPtr glSection;
		[FieldOffset (4664)]
		public IntPtr glTable;
		[FieldOffset (4672)]
		public IntPtr glCurrentRC;
		[FieldOffset (4680)]
		public IntPtr glContext;
		[FieldOffset (4688)]
		public uint LastStatusValue;
		[FieldOffset (4696)]
		public ushort StaticUnicodeString_Length;
		public unsafe UNICODE_STRING* StaticUnicodeString_Ref {
			get {
				fixed (TEB* __s = &this)
					return (UNICODE_STRING*)&__s->StaticUnicodeString_Length;
			}
		}
		[FieldOffset (4698)]
		public ushort StaticUnicodeString_MaximumLength;
		[FieldOffset (4704)]
		public char* StaticUnicodeString_buffer;
		[FieldOffset (4712)]
		public Char StaticUnicodeBuffer_Start;
		public unsafe Char* StaticUnicodeBuffer {
			get {
				fixed (TEB* __s = &this)
					return (Char*)&__s->StaticUnicodeBuffer_Start;
			}
		}
		[FieldOffset (5240)]
		public IntPtr DeallocationStack;
		[FieldOffset (5248)]
		public IntPtr TlsSlots_Start;
		public unsafe IntPtr* TlsSlots {
			get {
				fixed (TEB* __s = &this)
					return (IntPtr*)&__s->TlsSlots_Start;
			}
		}
		[FieldOffset (5760)]
		public LIST_ENTRY* TlsLinks_Flink;
		public unsafe LIST_ENTRY* TlsLinks_Ref {
			get {
				fixed (TEB* __s = &this)
					return (LIST_ENTRY*)&__s->TlsLinks_Flink;
			}
		}
		[FieldOffset (5768)]
		public LIST_ENTRY* TlsLinks_Blink;
		[FieldOffset (5776)]
		public IntPtr Vdm;
		[FieldOffset (5784)]
		public IntPtr ReservedForNtRpc;
		[FieldOffset (5792)]
		public IntPtr DbgSsReserved_Start;
		public unsafe IntPtr* DbgSsReserved {
			get {
				fixed (TEB* __s = &this)
					return (IntPtr*)&__s->DbgSsReserved_Start;
			}
		}
		[FieldOffset (5808)]
		public uint HardErrorDisabled;
		[FieldOffset (5816)]
		public IntPtr Instrumentation_Start;
		public unsafe IntPtr* Instrumentation {
			get {
				fixed (TEB* __s = &this)
					return (IntPtr*)&__s->Instrumentation_Start;
			}
		}
		[FieldOffset (5944)]
		public IntPtr WinSockData;
		[FieldOffset (5952)]
		public uint GdiBatchCount;
		[FieldOffset (5956)]
		public uint Spare2;
		[FieldOffset (5960)]
		public IntPtr Spare3;
		[FieldOffset (5968)]
		public IntPtr Spare4;
		[FieldOffset (5976)]
		public IntPtr ReservedForOle;
		[FieldOffset (5984)]
		public uint WaitingOnLoaderLock;
		[FieldOffset (5992)]
		public IntPtr Reserved5_Start;
		public unsafe IntPtr* Reserved5 {
			get {
				fixed (TEB* __s = &this)
					return (IntPtr*)&__s->Reserved5_Start;
			}
		}
		[FieldOffset (6016)]
		public IntPtr* TlsExpansionSlots;
		[FieldOffset (6024)]
		public uint ImpersonationLocale;
		[FieldOffset (6028)]
		public uint IsImpersonating;
		[FieldOffset (6032)]
		public IntPtr NlsCache;
		[FieldOffset (6040)]
		public IntPtr ShimData;
		[FieldOffset (6048)]
		public uint HeapVirtualAffinity;
		[FieldOffset (6056)]
		public IntPtr CurrentTransactionHandle;
		[FieldOffset (6064)]
		public IntPtr ActiveFrame;
		[FieldOffset (6072)]
		public IntPtr unknown_Start;
		public unsafe IntPtr* unknown {
			get {
				fixed (TEB* __s = &this)
					return (IntPtr*)&__s->unknown_Start;
			}
		}
		[FieldOffset (6088)]
		public IntPtr* FlsSlots;
	}
	public struct POINT
	{
		public int x, y;
	}
}

#endif
